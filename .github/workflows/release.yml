name: Build and Release Plugin

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - type: "ai"
            name: "qiniu-models"
            keep_models: true
            keep_tools: false
          - type: "kodo"
            name: "qiniu-tools"
            keep_models: false
            keep_tools: true
          - type: "all"
            name: "qiniu"
            keep_models: true
            keep_tools: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install yq for YAML processing
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
      
    - name: Download Dify Plugin CLI
      run: |
        mkdir -p /tmp/dify-cli
        curl -L -o /tmp/dify-cli/dify-plugin-linux-amd64 https://github.com/langgenius/dify-plugin-daemon/releases/download/0.2.0/dify-plugin-linux-amd64
        chmod +x /tmp/dify-cli/dify-plugin-linux-amd64
        
    - name: Prepare plugin files
      run: |
        mkdir -p /tmp/plugin-build
        # 复制需要的文件，排除 .git、.github 等不需要的目录
        rsync -av --exclude='.git' --exclude='.github' --exclude='build.sh' --exclude='__pycache__' . /tmp/plugin-build/

    - name: Configure plugin for ${{ matrix.type }}
      run: |
        cd /tmp/plugin-build
        
        # 更新 manifest.yaml
        yq eval '.name = "${{ matrix.name }}"' -i manifest.yaml
        
        # 根据类型删除不需要的文件和配置
        if [ "${{ matrix.keep_models }}" = "false" ]; then
          echo "🗑️  删除模型相关文件..."
          rm -rf models/
          rm -f provider/qiniu_ai.py provider/qiniu_ai.yaml
          yq eval 'del(.plugins.models)' -i manifest.yaml
          yq eval '.resource.permission = {"tool": {"enabled": true}}' -i manifest.yaml
        fi
        
        if [ "${{ matrix.keep_tools }}" = "false" ]; then
          echo "🗑️  删除工具相关文件..."
          rm -rf tools/
          rm -f provider/qiniu_tools.py provider/qiniu_tools.yaml
          yq eval 'del(.plugins.tools)' -i manifest.yaml
          yq eval '.resource.permission = {"model": {"llm": true, "rerank": false, "enabled": true, "moderation": false, "speech2text": false, "text_embedding": false, "tts": false}}' -i manifest.yaml
        fi
        
        # 确保 plugins 配置与实际文件一致
        if [ "${{ matrix.keep_models }}" = "true" ] && [ "${{ matrix.keep_tools }}" = "false" ]; then
          echo "📝 配置仅模型插件..."
          yq eval '.plugins = {"models": ["provider/qiniu_ai.yaml"]}' -i manifest.yaml
        elif [ "${{ matrix.keep_models }}" = "false" ] && [ "${{ matrix.keep_tools }}" = "true" ]; then
          echo "📝 配置仅工具插件..."
          yq eval '.plugins = {"tools": ["provider/qiniu_tools.yaml"]}' -i manifest.yaml
        elif [ "${{ matrix.keep_models }}" = "true" ] && [ "${{ matrix.keep_tools }}" = "true" ]; then
          echo "📝 配置完整插件..."
          yq eval '.plugins = {"models": ["provider/qiniu_ai.yaml"], "tools": ["provider/qiniu_tools.yaml"]}' -i manifest.yaml
        fi
        
        # 清理空的 provider 目录
        if [ -d provider ] && [ -z "$(ls -A provider)" ]; then
          rm -rf provider/
        fi
        
        # 清理 __pycache__ 文件
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true

    - name: Extract version from manifest
      id: get_version
      run: |
        VERSION=$(yq eval '.version' /tmp/plugin-build/manifest.yaml)
        PACKAGE_NAME="${{ matrix.name }}-${VERSION}.difypkg"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        echo "Package name: $PACKAGE_NAME"

    - name: Package plugin
      run: |
        PACKAGE_NAME="${{ steps.get_version.outputs.package_name }}"
        /tmp/dify-cli/dify-plugin-linux-amd64 plugin package -o "$PACKAGE_NAME" /tmp/plugin-build
        
    - name: Upload package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: ${{ steps.get_version.outputs.package_name }}
        asset_path: ./${{ steps.get_version.outputs.package_name }}
        asset_content_type: application/octet-stream
